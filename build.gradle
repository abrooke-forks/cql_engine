allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group = 'org.opencds.cqf'
    version = '1.2.42-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
        jcenter() // for hapi jpa server dependency
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        maven {
            url "https://oss.sonatype.org/content/groups/public/"
        }	
    }

    dependencies {
        testCompile group: 'info.cqframework', name: 'cql', version: '1.3.0-SNAPSHOT'
        testCompile group: 'info.cqframework', name: 'model', version: '1.3.0-SNAPSHOT'
        testCompile group: 'info.cqframework', name: 'cql-to-elm', version: '1.3.0-SNAPSHOT'
        testCompile group: 'info.cqframework', name: 'quick', version: '1.3.0-SNAPSHOT'
        testCompile group: 'org.testng', name: 'testng', version: '6.8.8'
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile group: 'uk.co.datumedge', name: 'hamcrest-json', version: '0.2'
        testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
        runtime files('src/main/resources/log4j.properties')
    }

    test {
        useTestNG()
    }

    jacoco {
        toolVersion = "0.7.4.201502262128"
    }

    check.dependsOn(jacocoTestReport)

    /*
       Turn on static code analysis by passing 'sca' as a system property:
       e.g., gradle -Dsca build

       Or add it to your user gradle.properties file (${HOME}/.gradle/gradle.properties):
       systemProp.sca=true
     */
    if (System.getProperty('sca') != null) {
        apply plugin: 'pmd'

        dependencies {
            pmd(
                    'net.sourceforge.pmd:pmd-core:5.3.1',
                    'net.sourceforge.pmd:pmd-java:5.3.1'
            )
        }

        pmd {
            consoleOutput = true
            toolVersion = "5.3.1"
            ruleSetFiles = files("${rootProject.projectDir}/custom-pmd-ruleset.xml")
            ruleSets = []
        }

        apply plugin: 'findbugs'

        findbugs {
            toolVersion = "3.0.1"
            excludeFilter = file("${rootProject.projectDir}/findbugs-exclude-filter.xml")
        }

        tasks.withType(FindBugs) {
            reports {
                xml.enabled = false
                html.enabled = true
            }
        }
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }
}

configure(subprojects.findAll {it.name in ['cql-engine']}) {
    configurations {
        xjc
    }

    dependencies {
        xjc group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.2.11'
        xjc group: 'com.sun.xml.bind', name: 'jaxb-xjc', version: '2.2.11'
        xjc group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.2.11'
        xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-ant', version: '0.9.4'
        xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics', version: '0.9.4'
        xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-fluent-api', version: '3.0'
        compile group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics', version: '0.9.4'
    }

    ext.xjc = [
            destDir: "${projectDir}/src/generated/java",
            args: '-disableXmlSecurity -Xfluent-api -Xequals -XhashCode -XtoString'
    ]

    task generateSources {
        outputs.dir xjc.destDir

        doLast {
            file(xjc.destDir).mkdirs()

            ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task', classpath: configurations.xjc.asPath)
                       }
                   }

    compileJava.dependsOn generateSources
    sourceSets.main.java.srcDirs += xjc.destDir

    clean {
        delete xjc.destDir
    }
}

configure(subprojects.findAll {it.name in ['cql-engine', 'cql-engine-fhir']}) {
    apply plugin: 'maven'
    apply plugin: 'signing'

    signing {
        required { gradle.taskGraph.hasTask(uploadArchives) }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: project.hasProperty("ossrhUsername") ? ossrhUsername : "", password: project.hasProperty("ossrhPassword") ? ossrhPassword : "")
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: project.hasProperty("ossrhUsername") ? ossrhUsername : "", password: project.hasProperty("ossrhPassword") ? ossrhPassword : "")
                }

                pom.project {
                    name project.name
                    packaging 'jar'
                    description "The ${project.name} library for the CQL Evaluation Engine"
                    url 'http://opencds.org'

                    scm {
                        connection 'scm:git:git@github.com:DBCG/cql_engine.git'
                        developerConnection 'scm:git:git@github.com:DBCG/cql_engine.git'
                        url 'git@github.com:DBCG/cql_engine.git'
                    }

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            name 'Bryn Rhodes'
                        }
                        developer {
                            name 'Christopher Schuler'
                        }
                    }
                }
            }
        }
    }
    uploadArchives.dependsOn sourcesJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

idea {
  project {
    languageLevel = '1.8'
    ipr {
      withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
      }
    }
  }
}
